* Copyright 2024 Aleksandr Bocharov
* Distributed under the Boost Software License, Version 1.0.
* See accompanying file LICENSE_1_0.txt
* or copy at http://www.boost.org/LICENSE_1_0.txt
* 2024-10-10
* https://github.com/Aleksandr3Bocharov/RefalAB

TEST1       START
            ENTRY Go
            EXTRN Add, Sub, Mul, Dr, Div
            EXTRN AddN, SubN, MulN, DrN, DivN
            EXTRN P1, M1, Prout, Numb, Symb, Proutm, CRel

Go          = <F1> <F2> <F3> <F4>

*  prowerka mul, dr, div, add, sub
F1          = k/prad/(/1/)/2/. +
            k/prad/()/2/. +
            k/prad/(/1/). +
            k/prad/(/1/)'-'/2/. +
            k/prsu/(/1/)/2/. +
            k/prsu/()/2/. +
            k/prsu/(/1/). +
            k/prsu/(/1/)'-'/2/. +
            k/prmu/('-'/126/). +
            k/prmu/()/2/. +
            k/prmu/('-'/126/)/2/. +
            k/prmu/(/65536/)/64/. +
            k/prmu/('-'/2/)'-'/2/. +
            k/prmu/(/16777215/)'-'/1/. +
            k/prmu/('-'/65536/)'-'/512/. +    
            k/prdr/(/5/)/3/. +
            k/prdr/(/5/)'-'/3/. +
            k/prdr/('-'/5/)/3/. +
            k/prdr/('-'/5/)'-'/3/. +
            k/prdr/(/5/)/33/. +
            k/prdr/(/5/)'-'/33/. +
            k/prdr/('-'/5/)/33/. +
            k/prdr/('-'/5/)'-'/33/. +
            k/prdl/(/5/)/3/. +
            k/prdl/(/5/)'-'/3/. +
            k/prdl/('-'/5/)/3/. +
            k/prdl/('-'/5/)'-'/3/. +
            k/prdl/(/5/)/33/. +
            k/prdl/(/5/)'-'/33/. +
            k/prdl/('-'/5/)/33/. +
            k/prdl/('-'/5/)'-'/33/. 
     
*  prowerka muln, drn, divn, addn, subn
F2          = k/pradn/(/1/)/2/. +
            k/pradn/()/2/. +
            k/pradn/(/1/). +
            k/pradn/(/1/)'-'/2/. +
            k/prsun/(/1/)/2/. +
            k/prsun/()/2/. +
            k/prsun/(/1/). +
            k/prsun/(/1/)'-'/2/. +
            k/prmun/('-'/126/). +
            k/prmun/()/2/. +
            k/prmun/('-'/126/)/2/. +
            k/prmun/(/65536/)/64/. +
            k/prmun/('-'/2/)'-'/2/. +
            k/prmun/(/16777215/)'-'/1/. +
            k/prmun/('-'/65536/)'-'/512/. +    
            k/prdrn/(/5/)/3/. +
            k/prdrn/(/5/)'-'/3/. +
            k/prdrn/('-'/5/)/3/. +
            k/prdrn/('-'/5/)'-'/3/. +
            k/prdrn/(/5/)/33/. +
            k/prdrn/(/5/)'-'/33/. +
            k/prdrn/('-'/5/)/33/. +
            k/prdrn/('-'/5/)'-'/33/. +
            k/prdln/(/5/)/3/. +
            k/prdln/(/5/)'-'/3/. +
            k/prdln/('-'/5/)/3/. +
            k/prdln/('-'/5/)'-'/3/. +
            k/prdln/(/5/)/33/. +
            k/prdln/(/5/)'-'/33/. +
            k/prdln/('-'/5/)/33/. +
            k/prdln/('-'/5/)'-'/33/.      

*  neot
F3          = k/prad/('+')/2/. +
            k/prad/(/2/)'-'. +
            k/prdr/(/1/)/0/. +      
            k/prdr/(/1//2//3//4/)/0//0/. +
            k/prdl/(/1/). +
            k/prdrn/(/1/)/0/. +      
            k/prdrn/(/1//2//3//4/)/0//0/. +
            k/prdln/(/1/).   

*  prowerka p1, m1, numb, symb
F4          = k/prp1//0/. +
            k/prp1//16777214/. +
            k/prm1//1/. +
            k/prm1//16777215/. +
            k/prnu/'1000'. +
            k/prnu/'-16777216'.  +
            k/prnu/'1000000000'. +
            k/prnu/'2147483647'. +
            k/prnu/. +
            k/prnu/'-'. +
            k/prnu/'+'. +
            k/prsy//1000/. +
            k/prsy/'-'/1//0/. +
            k/prsy/. +
            k/prsy/'-'. +
            k/prsy/'+'. +
            k/prsy//59//10144256/. +
            k/prsy//127//16777215/. +
            k/prsy/'+'/0//0//0/. +
*  neot
            k/prp1//16777215/. +
            k/prp1/'+'/1/. +     
            k/prm1//0/. +
            k/prnu/'2147483648'. +
            k/prnu/'-+45'. +
            k/prnu/'++'. +      
            k/prsy//128//0/. +
*  prowerka CREL
            <crel ('a')'a'> <crel (/1//2/)/1//2/> +
            <crel (/crel/)/crel/> <crel ('\101\n')'\101\n'> +
            <crel (/67//66/)'\103\102'> <crel ('A')'\101'> +
            <crel ('ab')'a'>  <crel ('ab')'b'> +
            <crel ('ba')'a'>  <crel ('ba')'b'> +
            <crel ('a')'ab'>  <crel ('b')'ab'> +
            <crel ('a')'ba'>  <crel ('b')'ba'> +
            <crel ('ab')'ba'> <crel ('ba')'ab'> +
            <crel ('100')'99'> <crel ('99')'100'> +
            <crel ('010')'99'> <crel ('99')'010'> +
*  neot
            <crel ('a'('b'))'b'> +
            <crel > <crel /0/> +
            <crel /crel/> +
            <crel ('a') 'b'('123')> <crel '123'>

Prad +
    E1      = <Prow /Add/ E1>

Prsu +
    E1      = <Prow /Sub/ E1>

Prmu +
    E1      = <Prow /Mul/ E1>

Prdr +
    E1      = <Prow /Dr/ E1>

Prdl +
    E1      = <Prow/Div/ E1>

Pradn +
    E1      = <Prow /AddN/ E1>

Prsun +
    E1      = <Prow /SubN/ E1>

Prmun +
    E1      = <Prow /MulN/ E1>

Prdrn +
    E1      = <Prow /DrN/ E1>

Prdln +
    E1      = <Prow /DivN/ E1>

Prm1 +
    E1      = <Prow /M1/ E1>

Prp1 +
    E1      = <Prow /P1/ E1>

Prnu +
    E1      = <Prow /Numb/ E1>

Prsy +
    E1      = <Prow /Symb/ E1>

Prow +
    S1 E2   = <Proutm S1 ': in=' E2 '  out=' < S1 E2>>

            END

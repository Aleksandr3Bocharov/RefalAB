* Copyright 2025 Aleksandr Bocharov
* Distributed under the Boost Software License, Version 1.0.
* See accompanying file LICENSE_1_0.txt
* or copy at http://www.boost.org/LICENSE_1_0.txt
* 2025-03-18
* https://github.com/Aleksandr3Bocharov/RefalAB

*====================================================================
* Рефал-функции библиотеки РефалАБ.
* Спецификаторы библиотеки РефалАБ.
* Пустые функции библиотеки РефалАБ.
*====================================================================

EXT START
    ENTRY Call, Map, FoldL, FoldR
    ENTRY Map_Accumulator(MapAccum), Del_Accumulator(DelAccum)
    ENTRY Load_File(LoadFile), Save_File(SaveFile)
    ENTRY Append_File(AppFile)
    ENTRY White_Spaces(WSpaces), Is_White_Space(IsWSpace)
    ENTRY Trim, TrimL, TrimR  
    ENTRY Exist, Set
    ENTRY True, False
    EXTRN Open, Close, Get, Put
    EMPTY True, False

* <Call WC EA> == ER
Call +
    SF EA +
        = < SF EA>
    (WC EB) EA +
        = <Call WC EB EA>

* <Map WC WI*> == ER
Map WC WN ET +
        = <Call WC WN> <Map WC ET>
    W0  =

* <FoldL WC WA WI*> == WA'
FoldL +
    WC WA WN ET +
        = <FoldL WC <Call WC WA WN> ET>
    WC WA +
        = WA

* <FoldR WC WI* WA> == WA'
FoldR +
    WC EH WP WA +
        = <FoldR WC EH <Call WC WP WA>>
    WC WA +
        = WA

* <Map_Accumulator WC WA WI*> == WA′ ER
Map_Accumulator +
    WC WA ET +
        = <Map_Accumulator_Aux WC WA () ET>
  
Map_Accumulator_Aux +
    WC WA (ER) WN ET +
        = <Map_Accumulator_Aux WC +
            <Map_Accumulator_Add_Scanned +
                <Call WC WA WN> +
            (ER)> +
        ET>
    WC WA (ER) +
        = WA ER
  
Map_Accumulator_Add_Scanned + 
    WA ES (ER) +
        = WA (ER ES)

* <Del_Accumulator W E> == E
Del_Accumulator +
    WA ER +
        = ER

* <Load_File S(/0/../4/)N E(O)F> == (E(O)L)*
Load_File +
    SN EF +
        = <Open 'r' SN EF> +
        <Load_File_Aux SN <Get SN>> +
        <Close 'r' SN>
  
Load_File_Aux +
    SN /0/ +
        =
    SN EL /0/ +
        = (EL)
    SN EL +
        = (EL) <Load_File_Aux SN <Get SN>>

* <Save_File S(/0/../4/)N (E(O)F) (E(O)L)*> == 
Save_File +
    SN (EF) EL +
        = <Open 'w' SN EF> +
        <Map (/Do_Write_Bracket_Line/ SN) EL> +
        <Close 'w' SN>
  
Do_Write_Bracket_Line +
    SN (EL) +
        = <Put SN EL>

* <Append_File S(/0/../4/)N (E(O)F) (E(O)L)*> == 
Append_File +
    SN (EF) EL +
        = <Open 'a' SN EF> +
        <Map (/Do_Write_Bracket_Line/ SN) EL> +
        <Close 'w' SN>

White_Spaces +
    S   ' \n\t\v\f\r'

* <Is_White_Space SW> == /True/ | /False/
Is_White_Space +
    S(:White_Spaces:)W +
        = /True/
    S0  = /False/

* <Trim E> == E'
Trim +
    EL  = <TrimL <TrimR EL>>

* <TrimL E> == E'
TrimL +
    S(:White_Spaces:)W EL +
        = <TrimL EL>
    E0  = E0
  
* <TrimR E> == E'
TrimR +
    EL S(:White_Spaces:)W +
        = <TrimR EL>
    E0  = E0
  
* <Exist W E> == /True/ | /False/
Exist +
    WS EB WS EE +
        = /True/
    WS E0 +
        = /False/
  
* <Set WE*> == WS*
Set R EB WS EM WS EE +
        = <Set EB WS EM> EE
    E0  = E0

    END

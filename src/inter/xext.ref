* Copyright 2025 Aleksandr Bocharov
* Distributed under the Boost Software License, Version 1.0.
* See accompanying file LICENSE_1_0.txt
* or copy at http://www.boost.org/LICENSE_1_0.txt
* 2025-04-21
* https://github.com/Aleksandr3Bocharov/RefalAB

*====================================================================
* Рефал-функции библиотеки РефалАБ.
* Спецификаторы библиотеки РефалАБ.
* Пустые функции библиотеки РефалАБ.
*====================================================================

EXT START
    ENTRY Apply, Map, FoldL, FoldR
    ENTRY Map_Accumulator, Del_Accumulator
    ENTRY Load_File, Save_File, Append_File
    ENTRY White_Spaces, Is_White_Space
    ENTRY Trim, TrimL, TrimR  
    ENTRY Exist, Set
    ENTRY True, False
    EXTRN FOpen, FClose, FGetS, FPutS
    EMPTY True, False

* <Apply W.Closure E.Arg> == E.Res
* W.Closure ::= S.Fn | (W.Closure E.Bounded)
Apply
    S.Fn E.Argument +
        = < S.Fn E.Argument>
    (W.Closure E.Bounded) E.Argument +
        = <Apply W.Closure E.Bounded E.Argument>

* <Map W.Closure W.Item*> == E.Item_Res*
* <Apply W.Closure W.Item> == E.Item_Res
Map W.Fn W.Next E.Tail +
        = <Apply W.Fn W.Next> <Map W.Fn E.Tail>
    W._ =

* <FoldL W.Closure W.Accum W.Item*> == W.Accum′
* <Apply W.Closure W.Accum W.Item> == W.Accum′
* W.Accum′ ::= W.Accum
FoldL
    W.Fn W.Acc W.Next E.Tail +
        = <FoldL W.Fn <Apply W.Fn W.Acc W.Next> E.Tail>
    W.Fn W.Acc +
        = W.Acc

* <FoldR W.Closure W.Item* W.Accum> == W.Accum′
* <Apply W.Closure W.Item W.Accum> == W.Accum′
* W.Accum′ ::= W.Accum
FoldR
    W.Fn E.Head W.Prev W.Acc +
        = <FoldR W.Fn E.Head <Apply W.Fn W.Prev W.Acc>>
    W.Fn W.Acc+
        = W.Acc

* <Map_Accumulator W.Closure W.Accum W.Item*> == W.Accum′ E.Item_Res*
* <Apply W.Closure W.Accum W.Item> == W.Accum′ E.Item_Res
* W.Accum′ ::= W.Accum
Map_Accumulator
    W.Fn W.Acc E.Tail +
        = <Map_Accumulator_Aux W.Fn W.Acc () E.Tail>
  
Map_Accumulator_Aux
    W.Fn W.Acc (E.Scanned) W.Next E.Tail +
        = <Map_Accumulator_Aux W.Fn +
            <Map_Accumulator_Add_Scanned <Apply W.Fn W.Acc W.Next> (E.Scanned)> +
            E.Tail>
    W.Fn W.Acc (E.Scanned) +
        = W.Acc E.Scanned
  
Map_Accumulator_Add_Scanned 
    W.Acc E.Step_Scanned (E.Scanned) +
        = W.Acc (E.Scanned E.Step_Scanned)

* <Del_Accumulator W.Accum E.Any> == E.Any′
Del_Accumulator
    W._ E.Any +
        = E.Any

* <Load_File S(/0/../4/).Handle E(O).FileName> == E.Lines
* E.Lines ::= (E(O).Line)*
Load_File
    S.Handle E.FileName +
        = <FOpen 'r' S.Handle E.FileName> +
        <Load_File_Aux S.Handle <FGetS S.Handle>> +
        <FClose 'r' S.Handle>
  
Load_File_Aux
    S.Handle /0/ +
        =
    S.Handle E.Line /0/ +
        = (E.Line)
    S.Handle E.Line +
        = (E.Line) <Load_File_Aux S.Handle <FGetS S.Handle>>

* <Save_File S(/0/../4/).Handle (E(O).FileName) E.Lines> ==
* E.Lines ::= (E(O).Line)*
Save_File
    S.Handle (E.FileName) E.Lines +
        = <FOpen 'w' S.Handle E.FileName> +
        <Map (/Do_Write_Bracket_Line/ S.Handle) E.Lines> +
        <FClose 'w' S.Handle>
  
Do_Write_Bracket_Line
    S.Handle (E.Line) +
        = <FPutS S.Handle E.Line>

* <Append_File S(/0/../4/).Handle (E(O).FileName) E.Lines> ==
* E.Lines ::= (E(O).Line)*
Append_File
    S.Handle (E.FileName) E.Lines +
        = <FOpen 'a' S.Handle E.FileName> +
        <Map (/Do_Write_Bracket_Line/ S.Handle) E.Lines> +
        <FClose 'w' S.Handle>

White_Spaces
    S   ' \n\t\v\f\r'

* <Is_White_Space S.Any> == /True/ | /False/
Is_White_Space
    S(:White_Spaces:)._ +
        = /True/
    S._ = /False/

* <Trim E.Any> == E.Any′
Trim
    E.Any +
        = <TrimL <TrimR E.Any>>

* <TrimL E.Any> == E.Any′
TrimL
    S(:White_Spaces:)._ E.Any +
        = <TrimL E.Any>
    E._ = E._

* <TrimR E.Any> == E.Any′
TrimR
    E.Any S(:White_Spaces:)._ +
        = <TrimR E.Any>
    E._ = E._

* <Exist W.Elem E.SampleElems> == /True/ | /False/
Exist
    W.Sample E.Items_B W.Sample E.Items_E +
        = /True/
    W._ E.__ +
        = /False/

* <Set W.Item*> == W.Item*′
Set R E.Items_B W.Repeated E.Items_E W.Repeated E.Uniques +
        = <Set E.Items_B W.Repeated E.Items_E> E.Uniques
    E._ = E._

    END

* Copyright 2025 Aleksandr Bocharov
* Distributed under the Boost Software License, Version 1.0.
* See accompanying file LICENSE_1_0.txt
* or copy at http://www.boost.org/LICENSE_1_0.txt
* 2025-04-14
* https://github.com/Aleksandr3Bocharov/RefalAB

*====================================================================
* Рефал-функции библиотеки РефалАБ.
* Спецификаторы библиотеки РефалАБ.
* Пустые функции библиотеки РефалАБ.
*====================================================================

EXT START
    ENTRY Apply, Map, FoldL, FoldR
    ENTRY Map_Accumulator, Del_Accumulator
    ENTRY Load_File, Save_File, Append_File
    ENTRY White_Spaces, Is_White_Space
    ENTRY Trim, TrimL, TrimR  
    ENTRY Exist, Set
    ENTRY True, False
    EXTRN FOpen, FClose, FGetS, FPutS
    EMPTY True, False

* <Apply W.Closure E.Arg> == E.Res
* W.Closure ::= S.Fn | (W.Closure' E.Bounded)
Apply
    S.Fn E.Argument +
        = < S.Fn E.Argument>
    (W.Closure E.Bounded) E.Argument +
        = <Apply W.Closure E.Bounded E.Argument>

* <Map W.Closure W.Item*> == E.ItemRes*
* <Apply W.Closure W.Item> == E.ItemRes
Map W.Fn W.Next E.Tail +
        = <Apply W.Fn W.Next> <Map W.Fn E.Tail>
    W._ =

* <FoldL W.Closure W.Accum W.Item*> == W.Accum'
* <Apply W.Closure W.Accum W.Item> == W.Accum′
* W.Accum′ ::= W.Accum
FoldL
    W.Fn W.Acc W.Next E.Tail +
        = <FoldL W.Fn <Apply W.Fn W.Acc W.Next> E.Tail>
    W.Fn W.Acc +
        = W.Acc

* <FoldR W.Closure W.Item* W.Accum> == W.Accum'
* <Apply W.Closure W.Item W.Accum> == W.Accum′
* W.Accum′ ::= W.Accum
FoldR
    W.Fn E.Head W.Prev W.Acc +
        = <FoldR W.Fn E.Head <Apply W.Fn W.Prev W.Acc>>
    W.Fn W.Acc+
        = W.Acc

* <Map_Accumulator W.C W.A W.I*> == W.A′ E.R
Map_Accumulator
    W.C W.A E.T +
        = <Map_Accumulator_Aux W.C W.A () E.T>
  
Map_Accumulator_Aux
    W.C W.A (E.R) W.N E.T +
        = <Map_Accumulator_Aux W.C +
            <Map_Accumulator_Add_Scanned +
                <Apply W.C W.A W.N> +
            (E.R)> +
        E.T>
    W.C W.A (E.R) +
        = W.A E.R
  
Map_Accumulator_Add_Scanned 
    W.A E.S (E.R) +
        = W.A (E.R E.S)

* <Del_Accumulator W E> == E
Del_Accumulator
    W.A E.R +
        = E.R

* <Load_File S(/0/../4/).N E(O).F> == (E(O).L)*
Load_File
    S.N E.F +
        = <FOpen 'r' S.N E.F> +
        <Load_File_Aux S.N <FGetS S.N>> +
        <FClose 'r' S.N>
  
Load_File_Aux
    S.N /0/ +
        =
    S.N E.L /0/ +
        = (E.L)
    S.N E.L +
        = (E.L) <Load_File_Aux S.N <FGetS S.N>>

* <Save_File S(/0/../4/).N (E(O).F) (E(O).L)*> == 
Save_File
    S.N (E.F) E.L +
        = <FOpen 'w' S.N E.F> +
        <Map (/Do_Write_Bracket_Line/ S.N) E.L> +
        <FClose 'w' S.N>
  
Do_Write_Bracket_Line
    S.N (E.L) +
        = <FPutS S.N E.L>

* <Append_File S(/0/../4/).N (E(O).F) (E(O).L)*> == 
Append_File
    S.N (E.F) E.L +
        = <FOpen 'a' S.N E.F> +
        <Map (/Do_Write_Bracket_Line/ S.N) E.L> +
        <FClose 'w' S.N>

White_Spaces
    S   ' \n\t\v\f\r'

* <Is_White_Space S.W> == /True/ | /False/
Is_White_Space
    S(:White_Spaces:).W +
        = /True/
    S._ = /False/

* <Trim E> == E'
Trim
    E.L = <TrimL <TrimR E.L>>

* <TrimL E> == E'
TrimL
    S(:White_Spaces:).W E.L +
        = <TrimL E.L>
    E._ = E._
  
* <TrimR E> == E'
TrimR
    E.L S(:White_Spaces:).W +
        = <TrimR E.L>
    E._ = E._
  
* <Exist W E> == /True/ | /False/
Exist
    W.S E.B W.S E.E +
        = /True/
    W.S E._ +
        = /False/
  
* <Set W.E*> == W.S*
Set R E.B W.S E.M W.S E.E +
        = <Set E.B W.S E.M> E.E
    E._ = E._

    END
